// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var PromiseMonad = require("bs-promise-monad/src/PromiseMonad.bs.js");
var JMySon$ReactHooksTemplate = require("../../JMySon.bs.js");
var Helpers$ReactHooksTemplate = require("../../Helpers.bs.js");

function Pages__Collection__Schema$Field(Props) {
  Props.className;
  var onChange = Props.onChange;
  var onDelete = Props.onDelete;
  var fieldKey = Props.fieldKey;
  var fieldType = Props.fieldType;
  var match = Helpers$ReactHooksTemplate.useState(fieldKey);
  var set_val = match[1];
  var value = match[0];
  return React.createElement("li", {
              className: "content__schema__fields__item"
            }, React.createElement("input", {
                  className: "content__schema__fields__item__key",
                  id: fieldKey,
                  name: fieldKey,
                  type: "text",
                  value: value,
                  onChange: (function (e) {
                      return Curry._1(set_val, e.currentTarget.value);
                    })
                }), React.createElement("p", {
                  className: "content__schema__fields__item__value"
                }, Helpers$ReactHooksTemplate.str(fieldType)), React.createElement("div", {
                  className: "content__schema__fields__item__actions"
                }, React.createElement("button", {
                      className: "content__schema__fields__item__actions__btn",
                      onClick: (function (e) {
                          e.preventDefault();
                          return Curry._1(onChange, /* tuple */[
                                      fieldKey,
                                      value
                                    ]);
                        })
                    }, Helpers$ReactHooksTemplate.str("update")), React.createElement("button", {
                      className: "content__schema__fields__item__actions__btn",
                      onClick: (function (e) {
                          e.preventDefault();
                          return Curry._1(onDelete, fieldKey);
                        })
                    }, Helpers$ReactHooksTemplate.str("delete"))));
}

var Field = /* module */[/* make */Pages__Collection__Schema$Field];

function deleteField(model, dispatch, changeQueue, key) {
  Curry._1(changeQueue, /* Sending */0);
  return PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$eq(fetch("/db_api/" + (String(model) + ("/field/delete/?key=" + (String(key) + ""))), Fetch.RequestInit[/* make */0](/* Post */2, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)), (function (prim) {
                        return prim.json();
                      })), (function (param) {
                    Curry._1(changeQueue, /* Free */1);
                    Curry._1(dispatch, /* Delete */Block.__(1, [key]));
                    return PromiseMonad.$$return(/* () */0);
                  })), (function (err) {
                Curry._1(changeQueue, /* Error */[err]);
                return PromiseMonad.$$return((console.error(err), /* () */0));
              }));
}

function renameField(model, dispatch, changeQueue, oldk, newk) {
  Curry._1(changeQueue, /* Sending */0);
  return PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$eq(fetch("/db_api/" + (String(model) + ("/field/rename/?oldk=" + (String(oldk) + ("&newk=" + (String(newk) + ""))))), Fetch.RequestInit[/* make */0](/* Post */2, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)), (function (prim) {
                        return prim.json();
                      })), (function (param) {
                    Curry._1(changeQueue, /* Free */1);
                    Curry._1(dispatch, /* Rename */Block.__(0, [
                            oldk,
                            newk
                          ]));
                    return PromiseMonad.$$return(/* () */0);
                  })), (function (err) {
                Curry._1(changeQueue, /* Error */[err]);
                return PromiseMonad.$$return((console.error(err), /* () */0));
              }));
}

function Pages__Collection__Schema(Props) {
  var collection = Props.collection;
  var match = Helpers$ReactHooksTemplate.useState(/* Free */1);
  var changeQueue = match[1];
  var match$1 = React.useReducer((function (state, action) {
          switch (action.tag | 0) {
            case 0 : 
            case 1 : 
                return state;
            case 2 : 
                return action[0];
            
          }
        }), /* array */[]);
  var dispatch = match$1[1];
  React.useEffect((function () {
          PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$eq(PromiseMonad.$great$great$eq(fetch("/db_api/collection/" + (String(collection) + "/schema")), (function (prim) {
                              return prim.json();
                            })), (function (x) {
                          return PromiseMonad.$$return(JMySon$ReactHooksTemplate.Decode[/* schema_response */4](x));
                        })), (function (res) {
                      Curry._1(dispatch, /* Load */Block.__(2, [res[/* data */0]]));
                      return PromiseMonad.$$return(/* () */0);
                    })), (function (err) {
                  Curry._1(changeQueue, /* Error */[err]);
                  return PromiseMonad.$$return((console.error(err), /* () */0));
                }));
          return undefined;
        }), ([]));
  var deleteField$1 = function (param) {
    return deleteField(collection, dispatch, changeQueue, param);
  };
  var renameField$1 = function (param, param$1) {
    return renameField(collection, dispatch, changeQueue, param, param$1);
  };
  return React.createElement("section", {
              className: "content__schema"
            }, React.createElement("ul", {
                  className: "content__schema__fields"
                }, Belt_Array.mapWithIndex(match$1[0], (function (i, f) {
                        return React.createElement(Pages__Collection__Schema$Field, {
                                    onChange: (function (param) {
                                        var newk = param[1];
                                        var oldk = param[0];
                                        if (oldk !== newk) {
                                          PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(renameField$1(oldk, newk), (function (x) {
                                                      return PromiseMonad.$$return((console.log(x), /* () */0));
                                                    })), (function (err) {
                                                  return PromiseMonad.$$return((console.error(err), /* () */0));
                                                }));
                                          return /* () */0;
                                        } else {
                                          return 0;
                                        }
                                      }),
                                    onDelete: (function (key) {
                                        PromiseMonad.$great$great$pipe(PromiseMonad.$great$great$eq(deleteField$1(key), (function (x) {
                                                    return PromiseMonad.$$return((console.log(x), /* () */0));
                                                  })), (function (err) {
                                                return PromiseMonad.$$return((console.error(err), /* () */0));
                                              }));
                                        return /* () */0;
                                      }),
                                    fieldKey: f[0],
                                    fieldType: f[1],
                                    key: String(i)
                                  });
                      }))), React.createElement("div", {
                  className: "content__schema__add"
                }, React.createElement("div", {
                      className: "content__schema__add__field"
                    }, React.createElement("label", {
                          className: "content__schema__add__field__label",
                          htmlFor: ""
                        }, Helpers$ReactHooksTemplate.str("field's name")), React.createElement("input", {
                          className: "content__schema__add__field__input",
                          type: "text"
                        })), React.createElement("div", {
                      className: "content__schema__add__field"
                    }, React.createElement("label", {
                          className: "content__schema__add__field__label",
                          htmlFor: ""
                        }, Helpers$ReactHooksTemplate.str("field's type")), React.createElement("select", {
                          className: "content__schema__add__field__input",
                          id: "type",
                          name: "type"
                        }, Belt_Array.mapWithIndex(/* array */[
                              "ID",
                              "String",
                              "Text",
                              "Date"
                            ], (function (i, t) {
                                return React.createElement("option", {
                                            key: String(i),
                                            value: t
                                          }, Helpers$ReactHooksTemplate.str(t));
                              })))), React.createElement("button", {
                      className: "content__schema__add__btn"
                    }, Helpers$ReactHooksTemplate.str("add"))));
}

var make = Pages__Collection__Schema;

exports.Field = Field;
exports.deleteField = deleteField;
exports.renameField = renameField;
exports.make = make;
/* react Not a pure module */
